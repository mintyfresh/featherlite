/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as EventsEventIdImport } from './routes/events/$eventId'
import { Route as TimersEventIdPopoutImport } from './routes/timers/$eventId.popout'
import { Route as RoundsRoundIdSlipsImport } from './routes/rounds/$roundId.slips'
import { Route as EventsEventIdTabImport } from './routes/events/$eventId.$tab'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const EventsEventIdRoute = EventsEventIdImport.update({
  id: '/events/$eventId',
  path: '/events/$eventId',
  getParentRoute: () => rootRoute,
} as any)

const TimersEventIdPopoutRoute = TimersEventIdPopoutImport.update({
  id: '/timers/$eventId/popout',
  path: '/timers/$eventId/popout',
  getParentRoute: () => rootRoute,
} as any)

const RoundsRoundIdSlipsRoute = RoundsRoundIdSlipsImport.update({
  id: '/rounds/$roundId/slips',
  path: '/rounds/$roundId/slips',
  getParentRoute: () => rootRoute,
} as any)

const EventsEventIdTabRoute = EventsEventIdTabImport.update({
  id: '/$tab',
  path: '/$tab',
  getParentRoute: () => EventsEventIdRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/events/$eventId': {
      id: '/events/$eventId'
      path: '/events/$eventId'
      fullPath: '/events/$eventId'
      preLoaderRoute: typeof EventsEventIdImport
      parentRoute: typeof rootRoute
    }
    '/events/$eventId/$tab': {
      id: '/events/$eventId/$tab'
      path: '/$tab'
      fullPath: '/events/$eventId/$tab'
      preLoaderRoute: typeof EventsEventIdTabImport
      parentRoute: typeof EventsEventIdImport
    }
    '/rounds/$roundId/slips': {
      id: '/rounds/$roundId/slips'
      path: '/rounds/$roundId/slips'
      fullPath: '/rounds/$roundId/slips'
      preLoaderRoute: typeof RoundsRoundIdSlipsImport
      parentRoute: typeof rootRoute
    }
    '/timers/$eventId/popout': {
      id: '/timers/$eventId/popout'
      path: '/timers/$eventId/popout'
      fullPath: '/timers/$eventId/popout'
      preLoaderRoute: typeof TimersEventIdPopoutImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface EventsEventIdRouteChildren {
  EventsEventIdTabRoute: typeof EventsEventIdTabRoute
}

const EventsEventIdRouteChildren: EventsEventIdRouteChildren = {
  EventsEventIdTabRoute: EventsEventIdTabRoute,
}

const EventsEventIdRouteWithChildren = EventsEventIdRoute._addFileChildren(
  EventsEventIdRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/events/$eventId': typeof EventsEventIdRouteWithChildren
  '/events/$eventId/$tab': typeof EventsEventIdTabRoute
  '/rounds/$roundId/slips': typeof RoundsRoundIdSlipsRoute
  '/timers/$eventId/popout': typeof TimersEventIdPopoutRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/events/$eventId': typeof EventsEventIdRouteWithChildren
  '/events/$eventId/$tab': typeof EventsEventIdTabRoute
  '/rounds/$roundId/slips': typeof RoundsRoundIdSlipsRoute
  '/timers/$eventId/popout': typeof TimersEventIdPopoutRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/events/$eventId': typeof EventsEventIdRouteWithChildren
  '/events/$eventId/$tab': typeof EventsEventIdTabRoute
  '/rounds/$roundId/slips': typeof RoundsRoundIdSlipsRoute
  '/timers/$eventId/popout': typeof TimersEventIdPopoutRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/events/$eventId'
    | '/events/$eventId/$tab'
    | '/rounds/$roundId/slips'
    | '/timers/$eventId/popout'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/events/$eventId'
    | '/events/$eventId/$tab'
    | '/rounds/$roundId/slips'
    | '/timers/$eventId/popout'
  id:
    | '__root__'
    | '/'
    | '/events/$eventId'
    | '/events/$eventId/$tab'
    | '/rounds/$roundId/slips'
    | '/timers/$eventId/popout'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  EventsEventIdRoute: typeof EventsEventIdRouteWithChildren
  RoundsRoundIdSlipsRoute: typeof RoundsRoundIdSlipsRoute
  TimersEventIdPopoutRoute: typeof TimersEventIdPopoutRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  EventsEventIdRoute: EventsEventIdRouteWithChildren,
  RoundsRoundIdSlipsRoute: RoundsRoundIdSlipsRoute,
  TimersEventIdPopoutRoute: TimersEventIdPopoutRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/events/$eventId",
        "/rounds/$roundId/slips",
        "/timers/$eventId/popout"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/events/$eventId": {
      "filePath": "events/$eventId.tsx",
      "children": [
        "/events/$eventId/$tab"
      ]
    },
    "/events/$eventId/$tab": {
      "filePath": "events/$eventId.$tab.tsx",
      "parent": "/events/$eventId"
    },
    "/rounds/$roundId/slips": {
      "filePath": "rounds/$roundId.slips.tsx"
    },
    "/timers/$eventId/popout": {
      "filePath": "timers/$eventId.popout.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
